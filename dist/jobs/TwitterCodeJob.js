"use strict";
// import ConnectionPool from "libs-connection-pool";
// import SQL from "sql-template-strings";
// import moment from "moment";
// import { Job } from "libs-job-manager";
// import { logger } from "../util/Logger";
// import { OkPacket, RowDataPacket } from "mysql2";
// import { TwitterCodeRequest, TwitterCodeResult, TwitterRequest, TwitterResult } from "../interface/TwitterInterface";
// import { TweetRelationCode } from "src/entity/TwitterTweets.entity";
// export class TwitterCodeJob extends Job<TwitterCodeRequest, TwitterCodeResult> {
//     constructor(jobRequest: TwitterCodeRequest,  private readonly cp: ConnectionPool) {
//         super(jobRequest);
//     }
//     async execute(): Promise<TwitterResult> {
//         const twitterCodeResult: TwitterCodeResult = {
//             success: false,
//             twitterId: this.request.twitterId,
//             startTime: this.request.startTime,
//             jobName: 'code',
//             done: this.request.done
//         }
//         try {
//             console.time('initOriginTweet')
//             await this.initOriginTweet();
//             console.timeEnd('initOriginTweet')
//             twitterCodeResult.success = true;
//             return twitterCodeResult;
//         } catch (err) {
//             logger.log(err);
//             return twitterCodeResult;
//         }
//     }
//     /**
//      * @dev This function assigns a relationship code to tweets marked as origin.
//      * @returns {Promise<boolean>} Relationship Code Assignment Results by Tweet
//      */
//     async initOriginTweet(): Promise<boolean> {
//         const sql = SQL`
//         SELECT
//             PI.tweetId,
//             PI.parentId,
//             PI.influencerId
//         FROM
//             PostInfluencer AS PI
//         LEFT JOIN 
//             TwitterRelationCode AS TRC ON PI.tweetId = TRC.tweetId
//         WHERE 
//             PI.isOrigin = 1 AND 
//             PI.isUsed = 0 AND
//             TRC.tweetId IS NULL AND 
//             PI.influencerId = ${this.request.twitterId};
//         `;
//         const tweets: TweetRelationCode[] = await this.cp.readerQuery(sql);
//         let result = true;
//         for (let i = 0; i < tweets.length; i++) {
//             const tweet: TweetRelationCode = tweets[i];
//             const code: string = this.codeGenerator();
//             const isCreateCode: boolean = await this.createTweetCode(code, tweet.tweetId);
//             logger.log('initParentTweet', i, isCreateCode, Math.ceil((i / tweets.length * 100)));
//             if ( ! isCreateCode) {
//                 // TODO: error exec
//                 result = false;
//             }
//             console.time('childTweet')
//             if (tweet.parentId) {
//                 const treeResult: boolean = await this.originTreeTweet(code, tweet.parentId);
//                 if ( ! treeResult) {
//                     // TODO: Error originTreeTweet exec
//                     result = false;
//                 }
//             }
//             // thread check
//             await this.createRepiledTweet(code, tweet.tweetId)
//             console.timeEnd('childTweet')
//         }
//         return result;
//     }
//     /**
//     * @dev This function fetches the parent-child relationship information of a tweet on the tweet ID and creates a relation code.
//     * @param {string} code - The relation code generated by the codeGenerator function
//     * @param {string} originParentId - The parent tweet ID to retrieve the parent-child relationship information
//     * @returns {Promise<boolean>} - Returns the function was successful in creating the relation code.
//     */
//     async originTreeTweet(code: string, originParentId: string): Promise<boolean> {
//         const sql = SQL`
//         SELECT
//             PI.parentId,
//             PI.tweetId
//         FROM
//             PostInfluencer AS PI
//         WHERE PI.tweetId = ${originParentId};
//         `;
//         const tweet: TweetRelationCode | undefined = await this.cp.readerQuerySingle(sql);
//         if ( ! tweet) return false;
//         const relationTweetResult: boolean = await this.createTweetCode(code, tweet.tweetId);
//         logger.log(code, tweet.tweetId, relationTweetResult)
//         if ( ! relationTweetResult) {
//             // TODO: relation insert failed exec
//             return false;
//         }
//         if (tweet.parentId) {
//             const parentResult: boolean = await this.originTreeTweet(code, tweet.parentId);
//             if ( ! parentResult) {
//                 // TODO: relation parent failed exec
//                 return false;
//             }
//         }
//         return true;
//     }
//     async createRepiledTweet(code: string, tweetId: string) {
//         const sql = SQL`
//         SELECT
//             PI.tweetId,
//             PI.parentId
//         FROM
//             PostInfluencer AS PI
//         LEFT JOIN TwitterRelationCode AS TRC ON PI.tweetId = TRC.tweetId
//         WHERE 
//             TRC.code IS NULL AND 
//             PI.parentId = ${tweetId} AND 
//             PI.influencerId = ${this.request.twitterId};
//         `;
//         const tweet: any = await this.cp.readerQuerySingle(sql);
//         logger.log(tweetId, 'replied ->', tweet);
//         if ( ! tweet) return false;
//         const realtionTweetResult: boolean = await this.createTweetCode(code, tweet.tweetId);
//         if ( ! realtionTweetResult) {
//             return false;
//         }
//         await this.createRepiledTweet(code, tweet.tweetId);
//     }
//     /**
//     * @dev Creates a relationship between a tweet and a code
//     * @param {string|null} code - The code to be associated with the tweet
//     * @param {string} tweetId - The ID of the tweet to be associated with the code
//     * @return {boolean} - Returns true if the relationship was successfully created, otherwise false.
//     */
//     async createTweetCode(code: string|null, tweetId: string): Promise<boolean> {
//         const createSql = SQL`
//         INSERT INTO 
//             TwitterRelationCode (code, tweetId, influencerId)
//         VALUES
//             (${code}, ${tweetId}, ${this.request.twitterId})
//         `;
//         const createResult : OkPacket = await this.cp.writerQuery(createSql);
//         return createResult.affectedRows > 0
//     }
//     /**
//     * @dev function to generate a unique code
//     * @returns {string} a unique code generated from the current timestamp and a randomly generated string
//     */
//     codeGenerator(): string {
//         const uuid = 'xxxxxxxx'.replace(/[xy]/g, function(c) {
//             let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 3 | 8);
//             return v.toString(16);
//           });
//         return `${Date.now().toString()}_${uuid}`;
//     }
// }
